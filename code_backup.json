import discord
from discord.ext import commands
import os
import json
import random
import datetime

client = commands.Bot(command_prefix="!", intents=discord.Intents.all())

#Show that bot is connected
@client.event
async def on_ready():
  print(f"Logged in as")



#Command to show points/leaderboard
@client.command(aliases=["lb", "leaderboard"])
async def points(ctx, sort=None):
    if sort == "--unsorted":
        with open("points.json", "r") as f:
            db = json.load(f)
        embed = discord.Embed(title="SangSquad Bingo Leaderboard",description = f"Team Points:\n\nTeam 1: {db['team1']}\nTeam 2: {db['team2']}\nTeam 3: {db['team3']}\nTeam 4: {db['team4']}\nTeam 5: {db['team5']}\nTeam 6: {db['team6']}")
        await ctx.send(embed=embed)
    else:
        with open("points.json", "r") as f:
            db = json.load(f)
        with open("mvpoints.json", "r") as f:
          mp = json.load(f)
        sorted_teams = sorted(db.items(), key=lambda x: x[1], reverse=True)
        sorted_mp = sorted(mp.items(), key=lambda x: x[1]["points"], reverse=True)
        description = "Team Points:\n\n"
        for team, points in sorted_teams:
          description += f"{team}: {points}\n"
        description += "\nTop 5 Individual Points:\n\n"
        for _, mvp in sorted_mp[:5]:
          description += f"{mvp['Name']}: {mvp['points']}\n"
        embed = discord.Embed(title='SangSquad Bingo Leaderboard',description=description,timestamp=datetime.datetime.utcnow())
        await ctx.send(embed=embed)


#command to show individual points
@client.command()
async def mvp(ctx):
  with open("mvpoints.json", "r") as f:
    mp = json.load(f)
  sorted_mp = sorted(mp.items(), key=lambda x: x[1]["points"], reverse=True)
  description = "Individual Points:\n\n"
  for points, mvp in sorted_mp:
    description += f"{mvp['Name']}: {mvp['points']}\n"
  embed = discord.Embed(title="SangSquad Bingo MVP", description=description, timestamp=datetime.datetime.utcnow())
  await ctx.send(embed=embed)



#Command to add points to a team
@client.command()
@commands.has_permissions(administrator=True)
async def add(ctx, team: str, points_added: eval):
    with open("points.json", "r") as f:
        points = json.load(f)
    points[f"{team}"] += points_added
    with open("points.json", "w") as f:
        json.dump(points, f)
    await ctx.send(f"Added {points_added} points to {team}.")


#Command to add points to a team and individual
@client.command(aliases=["ap"])
@commands.has_permissions(administrator=True)
async def addpoints(ctx, team: str, points_added: eval, member: discord.Member):
    with open("points.json", "r") as f:
        points = json.load(f)
    points[f"{team}"] += points_added
    with open("points.json", "w") as f:
        json.dump(points, f)
    with open("mvpoints.json", "r") as f:
        mp = json.load(f)
    member_id = str(member.id)
    if member_id not in mp:
        mp[member_id] = {}
        mp[member_id]["Name"] = member.name
        mp[member_id]["points"] = points_added
    else:
        mp[member_id]["points"] += points_added
    with open("mvpoints.json", "w") as f:
        json.dump(mp, f, indent=4)
    await ctx.send(f"Added {points_added} points to {team} and {member.name}.")


#Command to delete points from a team
@client.command(aliases=["del"])
@commands.has_permissions(administrator=True)
async def delete(ctx,team,points_del:eval):
  with open("points.json", "r") as f:
    points = json.load(f)
  points[f"{team}"] -= points_del
  with open("points.json", "w") as f:
    json.dump(points, f)
  await ctx.send(f"Removed {points_del} points from {team}.")



#Command to set points to a team
@client.command()
@commands.has_permissions(administrator=True)
async def set(ctx,team,points_set:int):
  with open("points.json", "r") as f:
    points = json.load(f)
  points[f"{team}"] = points_set
  with open("points.json", "w") as f:
    json.dump(points, f)
  await ctx.send(f"Set {team} to {points_set}")


# #Command to add individual points
@client.command(aliases=["ma"])
@commands.has_permissions(administrator=True)
async def mvpadd(ctx, member: discord.Member, points: eval):
    with open("mvpoints.json", "r") as f:
        mp = json.load(f)
    member_id = str(member.id)
    if member_id not in mp:
        mp[member_id] = {}
        mp[member_id]["Name"] = member.name
        mp[member_id]["points"] = points
        await ctx.send(f'Added {points} points to {member.name}')
    else:
        mp[member_id]["points"] += points
        await ctx.send(f'Added {points} points to {member.name}')
    with open("mvpoints.json", "w") as f:
        json.dump(mp, f, indent=4)




# #Command to delete individual points
@client.command(aliases=["md","mvpdel"])
@commands.has_permissions(administrator=True)
async def mvpdelete(ctx, member: discord.Member, points: eval):
    with open("mvpoints.json", "r") as f:
        mp = json.load(f)
    member_id = str(member.id)
    mp[member_id]["points"] -= points
    with open("mvpoints.json", "w") as f:
        json.dump(mp, f, indent=4)
    await ctx.send(f'Removed {points} points to {member.name}')



#Command to set individual points
@client.command(aliases=["ms"])
@commands.has_permissions(administrator=True)
async def mvpset(ctx, member: discord.Member, points: eval):
  with open("mvpoints.json", "r") as f:
    mp = json.load(f)
    member_id = str(member.id)
    if member_id not in mp:
        mp[member_id] = {}
        mp[member_id]["Name"] = member.name
        mp[member_id]["points"] = points
        await ctx.send(f'{points} points set to {member.name}')
    else:
        mp[member_id]["points"] = points
        await ctx.send(f'{points} points set to {member.name}')
    with open("mvpoints.json", "w") as f:
        json.dump(mp, f, indent=4)



#Command to reset leaderboard
@client.command()
@commands.has_permissions(administrator=True)
async def reset(ctx,team=None):
  await ctx.send("Type `confirm` if you want to reset")
  def check(o):
    return o.content.lower() == "confirm" and  str(o.author.id) == str(ctx.author.id)
  response = await client.wait_for('message', check = check, timeout = 300.0)
  if "confirm" in response.content.lower():
    if team == None:
      with open("points.json", "r") as f:
        points = json.load(f)
      for i in points:
        points[i] = 0
      with open("points.json", "w") as f:
        json.dump(points, f)
      await ctx.send("Reset all points")
    else:
      with open("points.json", "r") as f:
        points = json.load(f)
      points[f"{team}"] = 0
      with open("points.json", "w") as f:
        json.dump(points, f)
      await ctx.send(f"Reset {team} to 0")


#Removing this code cause if we have it and someone resets the whole json file then we will get an error
#Command to reset leaderboard
# @client.command()
# @commands.has_permissions(administrator=True)
# async def mvpreset(ctx,individual=None):
#   await ctx.send("Type `confirm` if you want to reset")
#   def check(o):
#     return o.content.lower() == "confirm" and  str(o.author.id) == str(ctx.author.id)
#   response = await client.wait_for('message', check = check, timeout = 300.0)
#   if "confirm" in response.content.lower():
#     if individual == None:
#       with open("indpoints.json", "r") as f:
#         ind_points = json.load(f)
#       for i in ind_points:
#         ind_points[i] = 0
#       with open("indpoints.json", "w") as f:
#         json.dump(ind_points, f)
#       await ctx.send("Reset all individual points")
#     else:
#       with open("indpoints.json", "r") as f:
#         ind_points = json.load(f)
#       ind_points[f"{individual}"] = 0
#       with open("indpoints.json", "w") as f:
#         json.dump(ind_points, f)
#       await ctx.send(f"Reset {individual} to 0")



#Command to roll the dice
@client.command()
async def roll(ctx):
  dice = random.randint(1,3)
  embed = discord.Embed(title = "SangSquad Dice Roll",description=f"{ctx.author.mention} rolled a {dice}")
  
  if dice == 1:
    embed.set_thumbnail(url = "https://cdn.discordapp.com/attachments/1101579115833872394/1101580033534984263/dice1_transparent.png")
  elif dice == 2 :
    embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/1101579115833872394/1101582115457470514/dice2_transparent.png")
  elif dice == 3:
    embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/1101579115833872394/1102072563116548176/dice3_transparent.png")
  await ctx.send(embed=embed)

#Run bot
client.run(os.environ['TOKEN'])

# backed up: 04/30/2023 02:22:05 EST



#Command to add points to a team
@client.command()
@commands.has_permissions(administrator=True)
async def add(ctx, team: str, points_added: eval,member:discord.Member):
    with open("points.json", "r") as f:
        points = json.load(f)
    points[f"{team}"] += points_added
    with open("points.json", "w") as f:
        json.dump(points, f)
    await ctx.send(f"Added {points_added} points to {team}.")
